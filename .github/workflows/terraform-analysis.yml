name: Terraform Best Practices Analysis

on:
  push:
    branches: [main, master, develop]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
  pull_request:
    branches: [main, master, develop]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - practices-only
          - cost-only
      force_run:
        description: 'Force run analysis even without Terraform changes'
        required: false
        default: false
        type: boolean

jobs:
  terraform-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform Best Practices Analysis
        run: |
          # Determine analysis type
          ANALYSIS_TYPE="${{ github.event.inputs.analysis_type || 'full' }}"
          echo "üîç Running analysis type: $ANALYSIS_TYPE"
          echo "üìÇ Triggered by: ${{ github.event_name }}"

          # Create output directory
          mkdir -p analysis-output

          # Run analysis with proper error handling
          docker run --rm \
            -v "$PWD:/workspace:ro" \
            -v "$PWD/analysis-output:/output" \
            -e ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            -e INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}" \
            -e ANALYSIS_TYPE="$ANALYSIS_TYPE" \
            -e SKIP_ERRORS="true" \
            ghcr.io/vskuratovichdev/terraform-best-practices-analyzer:latest || echo "Analysis completed with issues"

          # Check if analysis produced output
          if [ -f "analysis-output/analysis-report.md" ]; then
            echo "‚úÖ Analysis report generated successfully"
            echo "Report preview:"
            head -20 analysis-output/analysis-report.md
          else
            echo "‚ùå No analysis report generated"
            echo "Creating basic report..."
            mkdir -p analysis-output
            cat > analysis-output/analysis-report.md << 'EOF'
          # üèóÔ∏è Terraform Analysis Report

          ## ‚ùå Analysis Failed

          The automated analysis could not complete successfully. This may be due to:
          - Missing API keys for Claude AI or Infracost
          - Docker container issues
          - Terraform configuration problems

          ## üìã Next Steps
          1. Check that ANTHROPIC_API_KEY and INFRACOST_API_KEY are set in repository secrets
          2. Verify Terraform files are valid
          3. Check workflow logs for detailed error messages

          ## üîç Manual Validation
          You can still run basic Terraform validation:
          ```bash
          terraform fmt -check
          terraform validate
          ```
          EOF
          fi

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-analysis-report
          path: analysis-output/
          retention-days: 30

      - name: Comment PR with Analysis Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'analysis-output/analysis-report.md';

            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');

              // Truncate report if too long for GitHub comment
              const maxLength = 65000;
              const truncatedReport = report.length > maxLength
                ? report.substring(0, maxLength) + '\n\n... (Report truncated. See full report in artifacts)'
                : report;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üèóÔ∏è Terraform Best Practices Analysis\n\n${truncatedReport}`
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## üèóÔ∏è Terraform Best Practices Analysis\n\n‚ùå Analysis failed or no report generated. Check the workflow logs for details.'
              });
            }

      - name: Generate Job Summary
        if: always()
        run: |
          # Extract key metrics for GitHub Actions summary
          echo "# üèóÔ∏è Terraform Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "analysis-output/analysis-report.md" ]; then
            # Extract summary section
            echo "## üìä Analysis Summary" >> $GITHUB_STEP_SUMMARY

            # Parse the report for key metrics (basic parsing)
            TOTAL_ISSUES=$(grep -o "Total.*|.*[0-9]\+" analysis-output/analysis-report.md | tail -1 | grep -o '[0-9]\+' | tail -1 || echo "0")
            CRITICAL_ISSUES=$(grep -o "Critical.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 || echo "0")
            HIGH_ISSUES=$(grep -o "High.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 || echo "0")

            echo "- **Total Issues**: ${TOTAL_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical Issues**: ${CRITICAL_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "- **High Priority**: ${HIGH_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract cost information if available
            if grep -q "Estimated Monthly Cost" analysis-output/analysis-report.md; then
              COST=$(grep "Estimated Monthly Cost" analysis-output/analysis-report.md | head -1 | grep -o '\$[0-9.]\+' || echo "Unknown")
              echo "## üí∞ Cost Analysis" >> $GITHUB_STEP_SUMMARY
              echo "- **Estimated Monthly Cost**: ${COST}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            # Add links to artifacts
            echo "## üìã Full Reports" >> $GITHUB_STEP_SUMMARY
            echo "- üìÑ [Download Analysis Report](../artifacts)" >> $GITHUB_STEP_SUMMARY
            echo "- ü§ñ AI-powered recommendations included" >> $GITHUB_STEP_SUMMARY
            echo "- üí∞ Cost optimization suggestions provided" >> $GITHUB_STEP_SUMMARY

          else
            echo "‚ùå **Analysis Failed** - No report generated" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Critical Issues
        if: always()
        run: |
          # Check for critical issues in the analysis output but don't fail the workflow
          if [ -f "analysis-output/analysis-report.md" ]; then
            CRITICAL_COUNT=$(grep -o "Critical.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 2>/dev/null || echo "0")
            HIGH_COUNT=$(grep -o "High.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 2>/dev/null || echo "0")

            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $CRITICAL_COUNT critical issues in Terraform code"
              echo "::warning::Critical issues found - please review the analysis report"
            elif [ "$HIGH_COUNT" -gt 0 ]; then
              echo "‚ÑπÔ∏è Found $HIGH_COUNT high priority issues in Terraform code"
              echo "::notice::High priority issues found - consider reviewing before merging"
            else
              echo "‚úÖ No critical or high priority issues found"
            fi
          else
            echo "‚ÑπÔ∏è Analysis report not available for issue checking"
          fi

          # Don't fail the workflow - just provide information
          echo "‚úÖ Workflow completed successfully"