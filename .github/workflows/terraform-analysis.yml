name: Terraform Best Practices Analysis

on:
  push:
    branches: [main, master, develop]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
  pull_request:
    branches: [main, master, develop]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'

jobs:
  terraform-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform Best Practices Analysis
        run: |
          docker run --rm \
            -v "$PWD:/workspace:ro" \
            -v "$PWD/analysis-output:/output" \
            -e ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            -e INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}" \
            -e ANALYSIS_TYPE="full" \
            ghcr.io/vskuratovichdev/terraform-best-practices-analyzer:latest

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-analysis-report
          path: analysis-output/
          retention-days: 30

      - name: Comment PR with Analysis Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'analysis-output/analysis-report.md';

            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');

              // Truncate report if too long for GitHub comment
              const maxLength = 65000;
              const truncatedReport = report.length > maxLength
                ? report.substring(0, maxLength) + '\n\n... (Report truncated. See full report in artifacts)'
                : report;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üèóÔ∏è Terraform Best Practices Analysis\n\n${truncatedReport}`
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## üèóÔ∏è Terraform Best Practices Analysis\n\n‚ùå Analysis failed or no report generated. Check the workflow logs for details.'
              });
            }

      - name: Generate Job Summary
        if: always()
        run: |
          # Extract key metrics for GitHub Actions summary
          echo "# üèóÔ∏è Terraform Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "analysis-output/analysis-report.md" ]; then
            # Extract summary section
            echo "## üìä Analysis Summary" >> $GITHUB_STEP_SUMMARY

            # Parse the report for key metrics (basic parsing)
            TOTAL_ISSUES=$(grep -o "Total.*|.*[0-9]\+" analysis-output/analysis-report.md | tail -1 | grep -o '[0-9]\+' | tail -1 || echo "0")
            CRITICAL_ISSUES=$(grep -o "Critical.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 || echo "0")
            HIGH_ISSUES=$(grep -o "High.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 || echo "0")

            echo "- **Total Issues**: ${TOTAL_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical Issues**: ${CRITICAL_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "- **High Priority**: ${HIGH_ISSUES}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract cost information if available
            if grep -q "Estimated Monthly Cost" analysis-output/analysis-report.md; then
              COST=$(grep "Estimated Monthly Cost" analysis-output/analysis-report.md | head -1 | grep -o '\$[0-9.]\+' || echo "Unknown")
              echo "## üí∞ Cost Analysis" >> $GITHUB_STEP_SUMMARY
              echo "- **Estimated Monthly Cost**: ${COST}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            # Add links to artifacts
            echo "## üìã Full Reports" >> $GITHUB_STEP_SUMMARY
            echo "- üìÑ [Download Analysis Report](../artifacts)" >> $GITHUB_STEP_SUMMARY
            echo "- ü§ñ AI-powered recommendations included" >> $GITHUB_STEP_SUMMARY
            echo "- üí∞ Cost optimization suggestions provided" >> $GITHUB_STEP_SUMMARY

          else
            echo "‚ùå **Analysis Failed** - No report generated" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail on Critical Issues
        if: always()
        run: |
          # Check for critical issues in the analysis output
          if [ -f "analysis-output/analysis-report.md" ]; then
            CRITICAL_COUNT=$(grep -o "Critical.*|.*[0-9]\+" analysis-output/analysis-report.md | head -1 | grep -o '[0-9]\+' | tail -1 || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå Found $CRITICAL_COUNT critical issues in Terraform code"
              echo "Please review the analysis report and fix critical issues before merging"
              exit 1
            fi
          fi
          echo "‚úÖ No critical issues found"