name: Build and Publish Terraform Analyzer

on:
  push:
    branches: [main, master]
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - '.github/workflows/build-and-publish-docker.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'Dockerfile'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: terraform-security-analyzer

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Terraform Security Analyzer
            org.opencontainers.image.description=Comprehensive Docker-based Terraform security and best practices analyzer
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Create test Terraform files
          mkdir -p test-terraform
          cat > test-terraform/main.tf << 'EOF'
          resource "aws_s3_bucket" "example" {
            bucket = "my-test-bucket-${random_string.suffix.result}"
          }

          resource "random_string" "suffix" {
            length = 8
          }
          EOF

          cat > test-terraform/variables.tf << 'EOF'
          variable "environment" {
            description = "Environment name"
            type        = string
            default     = "test"
          }
          EOF

          # Test the published image
          docker run --rm \
            -v "$PWD/test-terraform:/workspace:ro" \
            -v "$PWD/test-output:/output" \
            -e ANALYSIS_TYPE=security-only \
            -e SKIP_ERRORS=true \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest || echo "Analysis completed"

          # Check if analysis produced output
          if [ -f "test-output/analysis-report.md" ]; then
            echo "✅ Docker image test successful"
            echo "Report preview:"
            head -20 test-output/analysis-report.md
          else
            echo "❌ Docker image test failed - no report generated"
            exit 1
          fi

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != 'latest'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Terraform Analyzer ${{ github.event.inputs.tag }}
          body: |
            ## Terraform Security Analyzer ${{ github.event.inputs.tag }}

            Docker image published to: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}`

            ### Usage
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}
            ```

            ### What's included:
            - Terraform validation and formatting
            - Checkov security scanning
            - TFSec security analysis
            - TFLint best practices
            - Terrascan multi-cloud scanning

            See [README-terraform-analyzer.md](README-terraform-analyzer.md) for full documentation.
          draft: false
          prerelease: false