name: Terraform Code Analysis with Claude Code

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to analyze'
        required: false
        default: 'main'
      analysis_type:
        description: 'Type of analysis to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - security-only
          - best-practices-only
      skip_tool_errors:
        description: 'Skip errors when security tools are not available'
        required: false
        default: true
        type: boolean
      skip_sarif_upload:
        description: 'Skip SARIF file upload if files are missing'
        required: false
        default: true
        type: boolean

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  terraform-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          echo "Claude Code version:"
          npx @anthropic-ai/claude-code --version

      - name: Verify Claude Code Authentication
        run: |
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "❌ ANTHROPIC_API_KEY is not set. Please add it to repository secrets."
            exit 1
          fi
          echo "✅ Claude Code authentication configured"
          
          # Test Claude Code with a simple prompt
          echo "🧪 Testing Claude Code authentication..."
          echo "Hello" | npx @anthropic-ai/claude-code --print --dangerously-skip-permissions --model sonnet > auth-test.txt 2>auth-error.txt || true
          echo "Auth test output size: $(wc -c < auth-test.txt 2>/dev/null || echo '0') bytes"
          if [ -s auth-test.txt ]; then
            echo "✅ Claude Code authentication working"
            head -5 auth-test.txt
          else
            echo "❌ Claude Code authentication failed"
            cat auth-error.txt
          fi

      - name: Create analysis workspace
        run: |
          mkdir -p terraform-analysis-workspace
          # Copy all files and directories, excluding the terraform-analysis-workspace itself
          find . -maxdepth 1 -name "terraform-analysis-workspace" -prune -o -type f -exec cp {} terraform-analysis-workspace/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "terraform-analysis-workspace" -prune -o -name ".*" -type f -exec cp {} terraform-analysis-workspace/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "terraform-analysis-workspace" -prune -o -type d -exec cp -r {} terraform-analysis-workspace/ \; 2>/dev/null || true
          cd terraform-analysis-workspace
          
          # Create analysis instruction if it doesn't exist
          if [ ! -f "terraform-analysis-instruction.md" ]; then
            echo "📝 Creating default Terraform analysis instruction..."
            curl -s https://raw.githubusercontent.com/your-org/terraform-analysis-templates/main/terraform-analysis-instruction.md -o terraform-analysis-instruction.md || echo "Using fallback instruction"
          fi

      - name: Run Terraform validation
        run: |
          cd terraform-analysis-workspace
          
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Basic validation
          terraform fmt -check=true -diff=true -recursive . || echo "⚠️ Terraform formatting issues found"
          
          # Initialize if possible (may fail without backend config)
          terraform init -backend=false || echo "⚠️ Terraform init failed - continuing without init"
          terraform validate || echo "⚠️ Terraform validation failed"

      - name: Install security analysis tools
        run: |
          if [ "${{ github.event.inputs.analysis_type }}" = "security-only" ] || [ "${{ github.event.inputs.analysis_type }}" = "full" ]; then
            echo "📦 Installing security analysis tools..."
            
            # Install Checkov for security scanning
            pip3 install checkov || echo "⚠️ Failed to install Checkov"
            
            # Install TFLint
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash || echo "⚠️ Failed to install TFLint"
            
            # Install TFSec
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash || echo "⚠️ Failed to install TFSec"
          else
            echo "ℹ️ Skipping security tools installation for analysis type: ${{ github.event.inputs.analysis_type }}"
          fi

      - name: Run automated security scans
        run: |
          cd terraform-analysis-workspace
          SKIP_ERRORS="${{ github.event.inputs.skip_tool_errors }}"
          
          if [ "${{ github.event.inputs.analysis_type }}" = "security-only" ] || [ "${{ github.event.inputs.analysis_type }}" = "full" ]; then
            echo "🔍 Running security scans..."
            
            # Run Checkov if available
            if command -v checkov >/dev/null 2>&1; then
              echo "Running Checkov security scan..."
              checkov -d . --output sarif --output-file-path . || [ "$SKIP_ERRORS" = "true" ]
              checkov -d . --output cli || [ "$SKIP_ERRORS" = "true" ]
            else
              echo "⚠️ Checkov not available"
              [ "$SKIP_ERRORS" = "false" ] && exit 1 || true
            fi
            
            # Create empty SARIF if file doesn't exist
            if [ ! -f "checkov-results.sarif" ]; then
              echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Checkov"}}, "results": []}]}' > checkov-results.sarif
            fi
            
            # Run TFSec if available
            if command -v tfsec >/dev/null 2>&1; then
              echo "Running TFSec security scan..."
              tfsec . --format sarif --out tfsec-results.sarif || [ "$SKIP_ERRORS" = "true" ]
              tfsec . || [ "$SKIP_ERRORS" = "true" ]
            else
              echo "⚠️ TFSec not available"
              [ "$SKIP_ERRORS" = "false" ] && exit 1 || true
            fi
            
            # Create empty SARIF if file doesn't exist
            if [ ! -f "tfsec-results.sarif" ]; then
              echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "TFSec"}}, "results": []}]}' > tfsec-results.sarif
            fi
          else
            echo "ℹ️ Skipping security scans for analysis type: ${{ github.event.inputs.analysis_type }}"
            # Create empty SARIF files for consistency
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Checkov"}}, "results": []}]}' > checkov-results.sarif
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "TFSec"}}, "results": []}]}' > tfsec-results.sarif
          fi
          
          if [ "${{ github.event.inputs.analysis_type }}" = "best-practices-only" ] || [ "${{ github.event.inputs.analysis_type }}" = "full" ]; then
            # Run TFLint if available
            if command -v tflint >/dev/null 2>&1; then
              echo "🔍 Running TFLint best practices check..."
              tflint --recursive || [ "$SKIP_ERRORS" = "true" ]
            else
              echo "⚠️ TFLint not available"
              [ "$SKIP_ERRORS" = "false" ] && exit 1 || true
            fi
          else
            echo "ℹ️ Skipping TFLint for analysis type: ${{ github.event.inputs.analysis_type }}"
          fi

      - name: Run Claude Code Analysis
        run: |
          cd terraform-analysis-workspace
          
          # Test Claude Code first
          echo "🧪 Testing Claude Code CLI..."
          npx @anthropic-ai/claude-code --help > test-output.txt 2>&1 || echo "Help command failed"
          cat test-output.txt
          
          # Create a simple prompt file
          cat > prompt.txt << 'EOF'
          Analyze this Terraform codebase for security issues and best practices. Provide a brief markdown report.
          EOF
          
          # Run Claude Code analysis with file input
          echo "🤖 Running Claude Code analysis..."
          echo "Prompt content:"
          cat prompt.txt
          echo "---"

          # Verify environment
          echo "Environment check:"
          echo "ANTHROPIC_API_KEY is set: $([ -n "$ANTHROPIC_API_KEY" ] && echo "Yes" || echo "No")"
          echo "Working directory: $(pwd)"
          echo "Files in directory: $(ls -la | wc -l) files"

          # Try with bypass permissions for GitHub Actions sandbox using piped input
          cat prompt.txt | npx @anthropic-ai/claude-code --print --dangerously-skip-permissions --model sonnet > claude-analysis-report.md 2>error.log
          EXIT_CODE=$?
          
          echo "Command exit code: $EXIT_CODE"
          echo "Output file size: $(wc -c < claude-analysis-report.md 2>/dev/null || echo '0') bytes"
          echo "Error log size: $(wc -c < error.log 2>/dev/null || echo '0') bytes"
          
          if [ $EXIT_CODE -eq 0 ] && [ -s claude-analysis-report.md ]; then
            echo "✅ Claude Code analysis completed successfully"
            echo "Analysis output preview:"
            head -10 claude-analysis-report.md
          else
            echo "⚠️ Claude Code analysis failed or produced no output"
            echo "Exit code: $EXIT_CODE"
            if [ -s error.log ]; then
              echo "Error output:"
              cat error.log
            fi
            if [ -f claude-analysis-report.md ]; then
              echo "Output file contents:"
              cat claude-analysis-report.md
            fi
            
            echo "# Terraform Analysis Report" > claude-analysis-report.md
            echo "## Error" >> claude-analysis-report.md
            echo "Claude Code analysis could not be completed." >> claude-analysis-report.md
            echo "" >> claude-analysis-report.md
            echo "## Debug Information" >> claude-analysis-report.md
            echo "- Working directory: $(pwd)" >> claude-analysis-report.md
            echo "- Files present: $(ls -la | head -10)" >> claude-analysis-report.md
            echo "- Claude Code test output:" >> claude-analysis-report.md
            echo '```' >> claude-analysis-report.md
            cat test-output.txt >> claude-analysis-report.md
            echo '```' >> claude-analysis-report.md
            echo "- Error log:" >> claude-analysis-report.md
            echo '```' >> claude-analysis-report.md
            cat error.log >> claude-analysis-report.md
            echo '```' >> claude-analysis-report.md
          fi

      - name: Combine analysis results
        run: |
          cd terraform-analysis-workspace
          
          # Create comprehensive report
          cat > final-analysis-report.md << 'EOF'
          # 🏗️ Terraform Infrastructure Analysis Report
          
          ## 📊 Analysis Summary
          This automated analysis was performed using Claude Code with custom Terraform analysis instructions, combined with industry-standard security scanning tools.
          
          ### 🔧 Tools Used
          - **Claude Code**: AI-powered comprehensive analysis
          - **Checkov**: Security and compliance scanning  
          - **TFSec**: Security-focused static analysis
          - **TFLint**: Terraform best practices validation
          - **Terraform**: Built-in validation and formatting
          
          ---
          
          EOF
          
          # Add Claude Code analysis
          echo "## 🤖 Claude Code Analysis" >> final-analysis-report.md
          echo "" >> final-analysis-report.md
          if [ -f "claude-analysis-report.md" ]; then
            cat claude-analysis-report.md >> final-analysis-report.md
          else
            echo "Claude Code analysis not available." >> final-analysis-report.md
          fi
          
          echo "" >> final-analysis-report.md
          echo "---" >> final-analysis-report.md
          echo "" >> final-analysis-report.md
          
          # Add security scan results
          echo "## 🔒 Security Scan Results" >> final-analysis-report.md
          echo "" >> final-analysis-report.md
          echo "### Checkov Results" >> final-analysis-report.md
          echo '```' >> final-analysis-report.md
          if [ -f "checkov-results.sarif" ]; then
            echo "Checkov scan completed. See SARIF file for detailed results." >> final-analysis-report.md
          else
            echo "Checkov scan results not available." >> final-analysis-report.md
          fi
          echo '```' >> final-analysis-report.md
          echo "" >> final-analysis-report.md
          
          echo "### TFSec Results" >> final-analysis-report.md
          echo '```' >> final-analysis-report.md
          if [ -f "tfsec-results.sarif" ]; then
            echo "TFSec scan completed. See SARIF file for detailed results." >> final-analysis-report.md
          else
            echo "TFSec scan results not available." >> final-analysis-report.md
          fi
          echo '```' >> final-analysis-report.md

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            terraform-analysis-workspace/checkov-results.sarif
            terraform-analysis-workspace/tfsec-results.sarif
            terraform-analysis-workspace/final-analysis-report.md
            terraform-analysis-workspace/claude-analysis-report.md

      - name: Upload SARIF files for GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event.inputs.skip_sarif_upload != 'true'
        with:
          sarif_file: terraform-analysis-workspace/checkov-results.sarif
          category: checkov
        continue-on-error: true

      - name: Upload TFSec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event.inputs.skip_sarif_upload != 'true'
        with:
          sarif_file: terraform-analysis-workspace/tfsec-results.sarif
          category: tfsec
        continue-on-error: true

      - name: Comment PR with analysis results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'terraform-analysis-workspace/final-analysis-report.md';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                // Truncate if too long for GitHub comment (max ~65536 chars)
                const maxLength = 60000;
                const finalReport = report.length > maxLength 
                  ? report.substring(0, maxLength) + '\n\n... (Report truncated. See artifacts for full report)'
                  : report;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: finalReport
                });
                
                console.log('✅ Analysis report posted to PR');
              } else {
                console.log('❌ Analysis report not found');
              }
            } catch (error) {
              console.error('❌ Failed to post PR comment:', error);
              
              // Post a fallback comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🤖 **Terraform Analysis Completed**\n\nThe automated Terraform analysis has completed. Please check the workflow artifacts for detailed results.\n\n📊 **Available Reports:**\n- Security scan results (Checkov, TFSec)\n- Claude Code comprehensive analysis\n- Combined analysis report\n\nℹ️ If you don\'t see detailed results here, check the [Actions tab](' + context.payload.repository.html_url + '/actions) for this workflow run.'
              });
            }

      - name: Set job status based on findings
        run: |
          cd terraform-analysis-workspace
          
          # Check for critical issues in the reports
          if grep -i "critical" final-analysis-report.md > /dev/null 2>&1; then
            echo "❌ Critical issues found in Terraform analysis"
            echo "::warning::Critical security or configuration issues detected. Please review the analysis report."
            # Don't fail the job, but set warning
          fi
          
          if grep -i "error\|failed" final-analysis-report.md > /dev/null 2>&1; then
            echo "⚠️ Errors detected during analysis"
            echo "::warning::Some analysis tools encountered errors. Please review the full report."
          fi
          
          echo "✅ Terraform analysis workflow completed"

      - name: Generate GitHub Actions Summary
        run: |
          cd terraform-analysis-workspace
          
          # Extract assessment metrics from the report
          OVERALL_SCORE=$(grep -o "Overall Assessment Score: [0-9]*/[0-9]*" final-analysis-report.md | head -1 | grep -o "[0-9]*/[0-9]*" || echo "Not Available")
          CRITICAL_COUNT=$(grep -o "Critical Findings\*\*: [0-9]*" final-analysis-report.md | head -1 | grep -o "[0-9]*" || echo "0")
          HIGH_COUNT=$(grep -o "High Priority Issues\*\*: [0-9]*" final-analysis-report.md | head -1 | grep -o "[0-9]*" || echo "0")
          MEDIUM_COUNT=$(grep -o "Medium Priority Issues\*\*: [0-9]*" final-analysis-report.md | head -1 | grep -o "[0-9]*" || echo "0")
          LOW_COUNT=$(grep -o "Low Priority Issues\*\*: [0-9]*" final-analysis-report.md | head -1 | grep -o "[0-9]*" || echo "0")
          
          # Create GitHub Actions summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🏗️ Terraform Analysis Results
          
          ## 📊 Overall Assessment
          **Score: ${OVERALL_SCORE}**
          
          ## 🔍 Findings Summary
          | Priority | Count |
          |----------|-------|
          | 🚨 Critical | ${CRITICAL_COUNT} |
          | ⚠️ High | ${HIGH_COUNT} |
          | ⚡ Medium | ${MEDIUM_COUNT} |
          | ℹ️ Low | ${LOW_COUNT} |
          
          ## 🔧 Tools Used
          - **Claude Code**: AI-powered comprehensive analysis
          - **Checkov**: Security and compliance scanning  
          - **TFSec**: Security-focused static analysis
          - **TFLint**: Terraform best practices validation
          - **Terraform**: Built-in validation and formatting
          
          ## 📋 Next Steps
          1. Review detailed findings in the workflow artifacts
          2. Address critical and high priority issues first
          3. Update Terraform configurations based on recommendations
          4. Re-run analysis after implementing fixes
          
          ---
          *Analysis completed on $(date)*
          EOF
          
          echo "✅ GitHub Actions summary generated"

  create-issue-on-critical:
    runs-on: ubuntu-latest
    needs: terraform-analysis
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Download analysis results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results

      - name: Check for critical issues and create issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('final-analysis-report.md')) {
                const report = fs.readFileSync('final-analysis-report.md', 'utf8');
                
                // Check for critical issues
                const hasCritical = report.toLowerCase().includes('critical');
                const hasHigh = report.toLowerCase().includes('high priority');
                
                if (hasCritical || hasHigh) {
                  const issueTitle = `🚨 Critical Terraform Security Issues Detected - ${new Date().toISOString().split('T')[0]}`;
                  const issueBody = `# Critical Terraform Analysis Issues
            
            **Repository:** ${context.repo.owner}/${context.repo.repo}
            **Branch:** ${context.ref}
            **Analysis Date:** ${new Date().toISOString()}
            **Triggered by:** ${context.eventName}
            
            ## 🔍 Summary
            The automated Terraform analysis has detected critical or high-priority security issues that require immediate attention.
            
            ## 📋 Action Required
            1. Review the full analysis report in the workflow artifacts
            2. Address critical security vulnerabilities immediately
            3. Update Terraform configurations according to recommendations
            4. Re-run the analysis after fixes
            
            ## 📊 Full Report
            \`\`\`
            ${report.substring(0, 30000)}
            \`\`\`
            
            ---
            *This issue was automatically created by the Terraform Analysis workflow. Please review and close after remediation.*`;
            
                  // Check if similar issue already exists
                  const existingIssues = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'open',
                    labels: 'terraform-security,automated'
                  });
                  
                  const hasExistingIssue = existingIssues.data.some(issue => 
                    issue.title.includes('Critical Terraform Security Issues')
                  );
                  
                  if (!hasExistingIssue) {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: issueTitle,
                      body: issueBody,
                      labels: ['terraform-security', 'critical', 'automated']
                    });
                    
                    console.log('✅ Critical issues GitHub issue created');
                  } else {
                    console.log('ℹ️ Similar critical issues issue already exists');
                  }
                }
              }
            } catch (error) {
              console.error('❌ Failed to create critical issues GitHub issue:', error);
            }
